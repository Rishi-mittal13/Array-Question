// 1). binary search by for loop method 
//time-complexity =  O(log(n))

public class BinarySearch {
    public static int BinarySearch1(int[] arr,int elm){ //return index of particular element in array;
        int n = arr.length;
        int low = 0;
        int  high  = n;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(arr[mid] == elm){
                return mid;
            }
            else if(arr[mid]<elm){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        int[] ar = {1,2,3,4,5,6,7,8,9,10,11,23,45,77,99,123,567};//array should be sorted in ascending order.
        int e = 1;
        System.out.println("INDEX = "+BinarySearch1(ar,e));
    }
}


//Time complexity analysis of binary search.
import java.util.Scanner;
public class bs {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        long[] arr = new long[10000000];
        for(int i = 0 ; i<10000000 ; i++){
            arr[i] = i+1;
        }
        int se = sc.nextInt();
        int len = arr.length;
        int s = 0 ;
        int e = len-1;
        boolean b = true;
        double start = System.currentTimeMillis();
        while(s<=e){
            int mid = (s+e)/2;
            if(arr[mid]==se){
                System.out.println(mid);
                b=false;
                break;
            }
            else if(arr[(int) mid]>se){
                e = mid-1;
            }
            else{
                s = mid+1;
            }
        }
        if(b){
            System.out.println(-1);
        }
        double end = System.currentTimeMillis();
        System.out.println("total time taken = "+ (end-start));
       
        sc.close();
    }
}
