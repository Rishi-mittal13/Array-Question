import java.util.*;
public class Main {
    static Scanner sc =  new Scanner(System.in);
    private class BinaryTree{
        private class Node{
            int data ;
            Node left ;
            Node right;
        }
        Node root =  createTree();
        public BinaryTree(){root =  createTree()}

        private Node createTree(){
            int item=  sc.nextInt();
            Node n =  new Node();
            n.data =  item;
            boolean hasLeft =  sc.nextBoolean();
            if(hasLeft) n.left =  createTree();
            boolean hasRight =  sc.nextBoolean();
            if(hasRight) n.right =  createTree();
            return n;
        }
    }
    public static void main (String args[]) {
        BinaryTree bt =  new BinaryTree();

        
    }
}










import java.util.*;
public class Main {
	static Scanner scn = new Scanner(System.in);
	public static void main(String[] args) {
		Main m = new Main();
		BinaryTree bt1 = m.new BinaryTree();
	}

	private class BinaryTree {
		private class Node {
			int data;
			Node left;
			Node right;
		}

		private Node root;
		private int size;

		public BinaryTree() {
			this.root = this.takeInput(null, false);
		}

		public Node takeInput(Node parent, boolean ilc) {
			int cdata = scn.nextInt();
			Node child = new Node();
			child.data = cdata;
			this.size++;

			// left
			boolean hlc = scn.nextBoolean();

			if (hlc) {
				child.left = this.takeInput(child, true);
			}

			// right
			boolean hrc = scn.nextBoolean();

			if (hrc) {
				child.right = this.takeInput(child, false);
			}

			// return
			return child;
		}
	}

}






import java.util.*;
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
	TreeNode(){}
    TreeNode(int x) { this.val = x; }
}

public class Main{
	static Scanner sc =  new Scanner(System.in);
	public static void main(String[] args){
		TreeNode root = createTree();
	}
    public static TreeNode createTree(){
        int item=  sc.nextInt();
        TreeNode n =  new TreeNode();
        n.val =  item;
        boolean hasLeft =  sc.nextBoolean();
        if(hasLeft) n.left =  createTree();
        boolean hasRight =  sc.nextBoolean();
        if(hasRight) n.right =  createTree();
        return n;
    }
}

